.PHONY: install-dev uninstall-dev clear check format build-image drop-image create-dev teardown-dev integration unit tests help

## ATTENTION! activate virtual environment before running!

## Install development packages and pre-commit hooks.
install-dev:
	@echo "Installing development packages..."
	pip3 install --upgrade pip
	pip3 install -U pip wheel setuptools
	pip3 install -r requirements.txt

## Uninstall all development packages.
uninstall-dev:
	@echo "Uninstalling all development packages..."
	pip freeze | xargs pip uninstall -y

## Clear all caches, autogenerated directories, and files.
clear:
	@echo "Clearing caches and autogenerated directories/files..."
	rm -rf logs
	rm -rf localstack
	rm -rf .mypy_cache
	rm -rf .pytest_cache
	rm -rf .coverage
	rm -rf mutation.sqlite
	rm -rf report.html
	rm -rf coverage-reports
	rm -rf htmlcov
	rm -rf tests/resources/tmp_configs

## Perform linting checks.
check:
	@echo "Running lint checks..."
	isort --check app tests 	
	black --check app tests 	
	flake8 app tests	
	mypy app tests --explicit-package-bases --python-version=3.10

## Format the codebase.
format:
	@echo "Formatting the codebase..."
	isort app tests
	black app tests

## Build Docker image for the application.
build-image:
	@echo "Building Docker image..."
	docker compose -f docker-compose.yaml build

## Remove built Docker image.
drop-image:
	@echo "Removing Docker image..."
	docker compose -f docker-compose.yaml down -v --rmi all

## Set up the development environment.
create-dev:
	@echo "Creating development environment..."
	docker compose -f docker-compose.yaml up -d --wait
	@echo "Initializing postgres database"
	python app/backend/setup_pg_database.py

## Tear down the development environment.
teardown-dev:
	@echo "Tearing down development environment..."
	docker-compose -f docker-compose.yaml down -v
	make clear

## Run integration tests.
integration:
	@echo "Setting up environment for integration tests..."
	docker compose -f docker-compose-test.yaml up -d --wait
	@echo "Running integration tests"
	pytest -v -s tests/integration --no-header -vv || (make integration-teardown && exit 1)
	@echo "Tearing down environment after tests"
	docker-compose -f docker-compose-test.yaml down -v
	make clear

## Run unit tests.
unit:
	@echo "Running unit tests..."
	make clear
	pytest -v -s tests/unit --no-header -vv --cov=app --cov-report=term-missing
	coverage xml
	make clear

## Run linting checks and then all tests.
tests: check build-image
	@echo "Running all tests..."
	make unit
	make integration

#################################################################################
# Self Documenting Commands                                                     #
#################################################################################
.DEFAULT_GOAL := help
# Inspired by <http://marmelab.com/blog/2016/02/29/auto-documented-makefile.html>
# sed script explained:
# /^##/:
#   * save line in hold space
#   * purge line
#   * Loop:
#       * append newline + line to hold space
#       * go to next line
#       * if line starts with doc comment, strip comment character off and loop
#   * remove target prerequisites
#   * append hold space (+ newline) to line
#   * replace newline plus comments by `---`
#   * print line
# Separate expressions are necessary because labels cannot be delimited by
# semicolon; see <http://stackoverflow.com/a/11799865/1968>
.PHONY: help
help:
	@echo "$$(tput bold)Available rules:$$(tput sgr0)"
	@echo
	@sed -n -e "/^## / { \
		h; \
		s/.*//; \
		:doc" \
		-e "H; \
		n; \
		s/^## //; \
		t doc" \
		-e "s/:.*//; \
		G; \
		s/\\n## /---/; \
		s/\\n/ /g; \
		p; \
	}" ${MAKEFILE_LIST} \
	| LC_ALL='C' sort --ignore-case \
	| awk -F '---' \
		-v ncol=$$(tput cols) \
		-v indent=19 \
		-v col_on="$$(tput setaf 6)" \
		-v col_off="$$(tput sgr0)" \
	'{ \
		printf "%s%*s%s ", col_on, -indent, $$1, col_off; \
		n = split($$2, words, " "); \
		line_length = ncol - indent; \
		for (i = 1; i <= n; i++) { \
			line_length -= length(words[i]) + 1; \
			if (line_length <= 0) { \
				line_length = ncol - indent - length(words[i]) - 1; \
				printf "\n%*s ", -indent, " "; \
			} \
			printf "%s ", words[i]; \
		} \
		printf "\n"; \
	}' \
	| more $(shell test $(shell uname) = Darwin && echo '--no-init --raw-control-chars')
